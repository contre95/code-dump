// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: src/person.proto

package contrepc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PresenterClient is the client API for Presenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenterClient interface {
	Present(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
}

type presenterClient struct {
	cc grpc.ClientConnInterface
}

func NewPresenterClient(cc grpc.ClientConnInterface) PresenterClient {
	return &presenterClient{cc}
}

func (c *presenterClient) Present(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/contrepc.Presenter/Present", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenterServer is the server API for Presenter service.
// All implementations must embed UnimplementedPresenterServer
// for forward compatibility
type PresenterServer interface {
	Present(context.Context, *Person) (*Person, error)
	mustEmbedUnimplementedPresenterServer()
}

// UnimplementedPresenterServer must be embedded to have forward compatible implementations.
type UnimplementedPresenterServer struct {
}

func (UnimplementedPresenterServer) Present(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Present not implemented")
}
func (UnimplementedPresenterServer) mustEmbedUnimplementedPresenterServer() {}

// UnsafePresenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenterServer will
// result in compilation errors.
type UnsafePresenterServer interface {
	mustEmbedUnimplementedPresenterServer()
}

func RegisterPresenterServer(s grpc.ServiceRegistrar, srv PresenterServer) {
	s.RegisterService(&Presenter_ServiceDesc, srv)
}

func _Presenter_Present_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenterServer).Present(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contrepc.Presenter/Present",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenterServer).Present(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

// Presenter_ServiceDesc is the grpc.ServiceDesc for Presenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Presenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contrepc.Presenter",
	HandlerType: (*PresenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Present",
			Handler:    _Presenter_Present_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/person.proto",
}
